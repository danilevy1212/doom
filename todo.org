#+TITLE: To Dos

* References:

+ [[https://github.com/p3r7/awesome-elisp][awesome-lisp.]]
+ https://www.reddit.com/r/emacs/comments/9lv1fd/a_simple_guide_to_writing_publishing_emacs/

* Inbox
** TODO [#A] Divide my org-agenda in multiple files within a 'agenda' directory.
** TODO [#A] Try out org-super-agenda, after customizing org module. https://github.com/alphapapa/org-super-agenda
** TODO Make =brave= the default browser.
** TODO [0/4] Lots to document:

- [ ] Keybindings
- [ ] Dash integration
- [ ] ex-commands
- [ ] Integrate with cheat-sh.el

[[file:~/.config/doom/config.org::*lookup][lookup]]
** TODO [#B] https://github.com/zevlg/telega.el?

** TODO https://github.com/folke/splashcii THIS BUT IN ELISP.

** TODO [#B] [[file:config.org::*Org]] https://github.com/m-cat/org-recur#time-of-day Utilizar esto para los schedule clases de japones.

MEJORAR mis diary s-exp con ~let~. ~current-time~ y las funciones en =time-date.el=,
Si esto no me convence, entonces:

This package extends org-mode and org-agenda with support for defining recurring
tasks and easily scheduling them.

By adding some simple syntax to anywhere in the task heading you can control how
often the task should recur. Examples:

    |+2|: Recur every other day.
    |+w|: Recur every week.
    |1|: Recur on the first of every month.
    |Thu|: Recur every Thursday.
    |Sun,Sat|: Recur every Sunday and Saturday.*
    |Wkdy|: Recur every weekday.*

The syntax is the same as the one already used by org-schedule, with examples of
additional syntax, provided by org-recur, marked by *.

First, we declare the package.

#+begin_src elisp :tangle packages.el
(package! org-recur)
#+end_src

#+begin_src elisp
(use-package! org-recur
  :defer t)
#+end_src

** TODO Cheatsheet? It might be rendant with the :tools lookup

In software development, there is a lot of information to keep track off. There is no shame in sometimes forgetting some details. Luckily, [[https://github.com/chubin/cheat.sh][cheat.sh]] can help to quickly brush over a topic to refresh one's memory.

#+begin_src elisp :tangle packages.el
(package! cheat-sh)
#+end_src

** TODO WAIT for HSLINER to refactor cli!

*** defcli! to auto install this configuration.

Installation of the config may require to manually uncomment 'literate' module
and run doom sync, create script for that?

*** HOLD Use [[doom-docs:getting_started.org][doctor.el]] to detect if nvm is installed.

Unfortunately, this feature cannot be implemented because there is no support for
it in doom emacs. However, I opened a [[https://github.com/hlissner/doom-emacs/issues/4190][issue]] in doom-emacs repo requesting this
feature.

I would love to make it myself!

Here is the headings I would have to put after the feature comes to fruition:

Before @config.el heading
# ** doctor.el

# In this file we can check for missing dependencies or incorrect configuration,
# which will be shown to the user when he runs ~doom doctor~.

# #+begin_src elisp :tangle doctor.el
# ;;; $DOOMDIR/doctor.el -*- lexical-binding: t; -*-
# #+end_src

Inside @nvm.el

# **** Doctor

# This package needs =nvm= to work, so let's warn the user if we detect that nvm is
# not installed.

# #+begin_src elisp :tangle doctor.el
# (error! "Test")

# (unless (or (file-directory-p "~/.nvm") (getenv "NVM_DIR"))
#   (warn! "Can't find the nvm directory, nvm package won't work."))
# #+end_src

** TODO [[https://bunpro.jp/api#getting-started][Look into the bunpro API]], excuse to use the 'rest' module.
** TODO [#B] Add org-super-agenda and better divide my tasks headings..
** HOLD Create a eshell/alias with nvm-exec https://jloubert.com/blog/eshell-nvm/
** TODO https://github.com/tecosaur/screenshot
