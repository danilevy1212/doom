# -*- eval: (progn (when (and (fboundp #'toc-org-mode) (not toc-org-mode)) (toc-org-mode)) (writeroom-mode +1)); -*-

#+TITLE: Dan's DOOM Emacs configuration
#+OPTIONS: toc:nil tags:nil todo:nil

* Table Of Contents :TOC_9:
- [[#rationale][Rationale]]
  - [[#message-hello-s-emacs][~(message "Hello, %s!" "emacs")~]]
  - [[#distro-hopping-in-emacs][Distro-hopping in Emacs]]
  - [[#back-to-vanilla][Back to vanilla.]]
  - [[#why-doom][Why DOOM?]]
  - [[#tldr][TL;DR:]]
- [[#installation][Installation]]
  - [[#prerequisites][Prerequisites]]
  - [[#steps][Steps]]
- [[#configuration][Configuration]]
  - [[#initel][init.el]]
    - [[#lexical-binding][Lexical binding.]]
    - [[#doom-modules][~doom!~ modules]]
      - [[#input][:input]]
      - [[#completion][:completion]]
        - [[#company-mode][Company Mode]]
        - [[#ivy][Ivy]]
      - [[#ui][:ui]]
        - [[#that-doom-feel][That *DOOM* feel.]]
        - [[#emoji][emoji]]
        - [[#hl-todo][hl-todo]]
        - [[#hydra][hydra]]
        - [[#ligatures][ligatures]]
        - [[#mode-line][Mode line]]
        - [[#nav-flash][nav-flash]]
        - [[#ophints][ophints]]
        - [[#popup][popup]]
        - [[#treemacs][treemacs]]
        - [[#unicode][unicode]]
        - [[#vc-gutter][vc-gutter]]
        - [[#vi-tilde-fringe][vi-tilde-fringe]]
        - [[#window-select][window select]]
        - [[#workspaces][workspaces]]
        - [[#zen][zen]]
      - [[#editor][:editor]]
        - [[#evil][evil]]
        - [[#file-templates][file-templates]]
        - [[#fold][fold]]
        - [[#lispy][lispy]]
        - [[#parinfer][parinfer]]
        - [[#snippets][snippets]]
        - [[#word-wrap][word-wrap]]
      - [[#emacs][:emacs]]
        - [[#editor-1][editor]]
        - [[#electric][electric]]
        - [[#ibuffer][ibuffer]]
        - [[#undo][undo]]
        - [[#vc][vc]]
      - [[#term][:term]]
        - [[#eshell][eshell]]
        - [[#vterm][vterm]]
      - [[#checkers][:checkers]]
        - [[#syntax][syntax]]
        - [[#spell][spell]]
        - [[#grammar][grammar]]
      - [[#tools][:tools]]
        - [[#lookup][lookup]]
      - [[#os][:os]]
        - [[#tty][tty]]
      - [[#lang][:lang]]
        - [[#rust][rust]]
          - [[#dependencies][Dependencies:]]
        - [[#sh][sh]]
        - [[#web][web]]
      - [[#email][:email]]
      - [[#app][:app]]
      - [[#config][:config]]
        - [[#literate][literate]]
        - [[#better-defaults][Better Defaults]]
  - [[#packagesel][packages.el]]
    - [[#how-does-packagesel-work][How does packages.el work?]]
    - [[#declarations][Declarations]]
  - [[#auto-load-folder][Auto-load folder]]
  - [[#configel][config.el]]
    - [[#customize-group][Customize Group]]
    - [[#default-font][Default font]]
    - [[#default-theme][Default theme]]
      - [[#nord-powered-aesthetics][Nord powered aesthetics.]]
    - [[#dired][Dired]]
    - [[#dotenv][Dotenv]]
    - [[#eshell-1][eshell]]
      - [[#auto-loads][Auto-loads]]
    - [[#hydra-1][Hydra]]
    - [[#language-tool][Language Tool]]
    - [[#line-numbers][Line-numbers]]
    - [[#modeline][Modeline]]
    - [[#mozc-japanese-input-deprecated][Mozc (Japanese Input) DEPRECATED.]]
      - [[#auto-loads-1][Auto-loads]]
    - [[#nvm-deprecated][nvm DEPRECATED]]
      - [[#auto-loads-2][Auto-loads]]
    - [[#org][Org]]
      - [[#org-edna][org-edna]]
      - [[#auto-loads-3][Auto-loads]]
    - [[#personal-information][Personal information]]
    -  [[#prescient][Prescient]]
    - [[#pretending-we-are-in-vim-thats-just-plain-evil][Pretending we are in vim? That's just plain EVIL!]]
    - [[#projectile][Projectile]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rss-or-how-to-get-news-the-old-way][RSS, or how to get news the old-way.]]
    - [[#rust-1][Rust]]
    - [[#splash-screen][Splash Screen]]
    - [[#snow][Snow]]
    - [[#treemacs-1][Treemacs]]
    - [[#vc-gutter-1][vc-gutter]]
    - [[#vue][Vue]]
    - [[#web-mode][Web Mode]]
    - [[#which-key][Which Key]]
    - [[#word-wrap-1][Word wrap]]
  - [[#private-modules][Private modules.]]

* Rationale

During my undergraduate years, I remember having trouble setting up a postfix
server for a practical exercise in one of my classes. I had to edit the default
configuration file to harden the security of the system. My server was wrongly
configured and I couldn't figure out what part of my edits I had messed up. We
had to do all the changes to configuration file through a tty in an FreeBDS
virtual machine, so I had to use a terminal editor. =nano= was my choice
since it was similar to the other GUI editors I had used at the time. After much
frustration, I asked a professor of mine to please help me out. He took over my
seat, closed my =nano= session and reopened the configuration file with a different editor.
He was pressing all sorts of keys on the keyboard at an amazing speed, the
cursor was flying all over the screen. I was simply at awe.

The professor found what was wrong with my configuration and fixed it, telling me what
he had changed. When he left, I tried to look up what command he had run to edit
the file. This was my first experience with... =vim=.  I got introduced to =emacs= some
months later, when I saw a friend of mine taking some notes with it.

In any case, this is the earliest point that I can remember thinking that the
efficiency of text-editing, just like with any other task, is fully dependent on
the tool used to achieve it. Considering that I was on a professional path to
become a software engineer, a job that consists of reading documentation,
source code and editing, I figured that it would pay off in the long run to take
some time to explore what editors were out there and make an educated choice for
a text editor, instead of just using whatever was popular.

** ~(message "Hello, %s!" "emacs")~

Having taken that decision, I played around with =vim= and later on with =emacs=,
finally settling with the former to write the code for my thesis. I started out
with a vanilla configuration, a single =.emacs= file where I would copy and paste
Emacs Lisp from other people's configuration without much thinking.  It was
ugly, messy and buggy but It was also fun. I loved the idea of using code to
configure the tool that I would use to edit code, so I stuck with it.

My knowledge of Emacs would come from google searches, blog posts and the online
GNU Emacs documentation. I still hadn't learned how to ask Emacs the things that
I didn't know (The invaluable C-h _).  Embarrassingly, I didn't learn that until
late into my Emacs usage history.  My editing needs were minimal so
even if my configuration didn't have all the bells and whistles of other
editors, It was good enough for me. I also knew, at least on a theoretical
level, that Emacs had almost no limits when it came to extensibility. Emacs can
interact with the OS to do just about anything, which explains part of the
popular saying that refers to Emacs as:

#+begin_quote
A great OS, if only missing a good text editor.
#+end_quote

When I got frustrated with Emacs because I broke it somehow or I didn't know how
to do something with it, the potential of Emacs as an almost infinitely
extensible editor always kept me from switching editors and moving on. Even now,
is this fact that keeps me going back to it.

** Distro-hopping in Emacs

Life changes and so do our needs. I got my first full-time job as Web Developer
and Emacs had to level up to a robust daily driver. I had to use different
technologies in a project with continuously changing requirements.  My cute
emacs experiment could not keep up. I had to use other IDEs to be able to push
the work out.  However, I was always missing aspects of Emacs when
using other editors, like the frame, buffer and window model, the automatic
backup files or just the simple fact that I could change almost any aspect of my
emacs if I so desired.

I would still open up Emacs for magit when interacting with git or for org-mode
as my todo app. However, I wanted to use Emacs for more than that. Emacs shines
when you know what you want from it. However, It can be daunting and take a
lot of work to set up a configuration for *general* programming purposes.  Which
packages are good? Which are compatible with what you have? When two or more
packages are similar, how do you decide which one to use? If Emacs was to be my
daily driver, I would have to answer this questions often, which implies
research, time and effort.

_Why work on problems that others have already solved?_ With this in mind, I
decided to try out =spacemacs=, a community developed Emacs distribution full of
pre-configured packages grouped by =layers=. And for a while, It worked out great.
The defaults were good, it was functional enough and it could keep up with the
technologies I was using at work. What was not to love? Well, with continuous
use the wrinkles started to appear. For one, =spacemacs= was slow. It would take a
long time to startup and commands were noticeably sluggish. It was also pretty
buggy.  Sure, the layers for different languages worked reasonably well but from
time to time Emacs would behave in unexpected ways and I would have no idea why.

Looking into ways of making =spacemacs= faster, I stumbled upon =doom= and decided
to try it out. It is fast, at startup and during use. It feels quick and snappy.
Installing =doom= modules was similar enough to configuring =spacemacs= layers.
While =doom= was not by any means buggy, I would get frustrated with its
opinionated defaults.  =doom= would have some keybinding I didn't like or some
package had some extra behavior different to what I expected and I wouldn't
know how to change it to what I wanted.

** Back to vanilla.

At this point it was clear to me what was the real problem. My ignorance of the
inner workings of Emacs was my only limiting factor. So I took an extreme
position, I went back to pure vanilla again, discarding all my previous
configurations and starting from scratch, while using other editors for my job.
My objective was to recreate the aspects that I liked from =doom= from scratch in
my own configuration.

I took it slow, researching Emacs thoroughly and little by little building my
configuration, but trying to understand everything that I was changing. I read
[[https://www.masteringemacs.org/][Mickey Peterson's Mastering Emacs]], where I finally learned how to ask Emacs
about the things I don't understand. [[http://ergoemacs.org/][Xah's ergoemacs]] blog was an awesome
reference I keep consulting even now. It has all sorts of information on Emacs lisp
syntax, Emacs concepts and configuration tips and tricks.

Other members of the awesome Emacs community I started follow where [[https://protesilaos.com/dotemacs/][Protesilaos
Stavrou]], a long term =vim= user transformed into a hardcore Emacs user, whose
videos explaining his configuration where a great inspiration for me and taught
me to favor built-in packages over third party packages and most importantly,
how to build my own criteria for what packages I should use.

It took at least two months until I made a configuration that I could use at
work again, but it felt great when I finally managed to have something that was
reasonably fast, reproducible in any computer running Linux and was functional
enough for my use cases that I had made and I intimately understood!  Although I
am nowhere near an Emacs expert, if such a thing exists, and a lot of details
still escape me. I learned a LOT about not only Emacs, but about lisp,
functional programming and free (as in freedom) extensible software! Going back
to basics paid of in spades.

** Why DOOM?

I'll ask again, _Why work on problems that others have already solved?_. Well, in
my case, It was to learn more about the problem-context.  The thing is, Emacs is
truly immense, even if we don't take into account all the third party packages
written for it. It has its own lisp dialect for extensibility, a =mode= system for
defining unique behavior in each buffer, with =major modes= (one per buffer) and
=minor modes= (can be multiple or none in a buffer) that change the visual
elements, available commands and keybindings and it has different systems to
detect when and which of these modes it should activate at any given time. It
also has different ways of running system commands synchronously or
asynchronously and processing their output, including a process manager for the
programs that are running under Emacs!

I'm not even being exhaustive. Add to that 40 years of packages and multiple
Emacs releases! This wouldn't be so troublesome if it weren't for the terrible
defaults with which Emacs installs. Ugly default theme and questionable default
bindings aside, it is terribly unoptimized for modern systems slowing down
performance. During my vanilla adventure, a lot of my time was just spent trying
to make Emacs feel more modern and fast, which is time-consuming. It's surprising
that packages such as ~gchm-mode~ and use-package don't come
preinstalled with Emacs as they are incredible time savers, not just with
performance but also in configuration time...

At the beginning of re-configuring my vanilla Emacs, after addressing the
terrible defaults, the problems I was trying to solve were interesting, perhaps
because it was my first time trying to solve them. Things like: What's the best
moment to lazy load this package?, How do I write Spanish accents in Emacs?,
How should I structure my ~*.el~ files directory?. As the configuration grew,
more and more problems started appearing. Nothing major that broke my workflow
but annoyances nonetheless. I would write =FIXME= comments in my ~.el~ files to
keep track of these problems, so I could fix them later.

When I wanted to set up Emacs for a new language environments, I would spend a
lot of time checking out what community packages there were for that specific
environment, putting =TODO= comments with the projects' repository URL, so I could
try out and configure it out later on. Quickly It became the case that for every
=FIXME= or =TODO= comment I would solve, two or three more would appear.

The =FIXME= were not such a big deal, I like hunting bugs and fixing them, since I
always feel like I at least learn something in the process.  The big problems
were the =TODO=, which were not remotely as interesting to solve. Looking for
packages is time-consuming and I would end up not using what I tried out.  Other
times, the packages were so massive I never wanted to because I knew It would
take a long time to really configure it like I wanted to. Honorable mentions in
these categories are =lsp= and =treemacs=.

#+HTML: <p align="center"><img src="https://raw.githubusercontent.com/danilevy1212/doom/master/img/too-many-todos.png"/></p>
#+HTML: <p align="center">Unresolved issues in my vanilla configuration.</p>

So, _Why work on problems that others have already solved?_. Not all problems are
equally and some problems are just tedious to solve, this is the principal
reason why I choose to go back to =doom=. Another reason is that I strongly agree
with the project guiding principles. =doom= is not and IDE replacement or a
what-you-see-is-what-you-get type of editor. It's fully expected of its users to
customize it and all its functionality is open to the user so it can be
tinkered with.  No magic, just well-thought-out Emacs lisp macros and hooks!

This is perhaps what I like the most about =doom=, its true power resides in it's
=core= module, where all the macros, functions and hooks used to help the user
extend Emacs resides. The =modules= in =doom= just use those set of tools to offer
configuration options for specific use cases. This offers a mix of the best of
both the worlds of vanilla Emacs and spacemacs. With =doom= I can try out a
module, see what I like, bring it over to my configuration, disable packages
that I don't like and mix them with my own packages in a quick and reliable
manner, much more so that If I were back in vanilla Emacs.

** TL;DR:

[[https://blog.jethro.dev/posts/migrating_to_doom_emacs/][It offers reasonable defaults and lots of functionality without sacrificing extensibility or performance]]

* Installation

** Prerequisites

- Git 2.23+
- Emacs 26.1+ *(27.x is recommended)*
- [[https://github.com/BurntSushi/ripgrep][ripgrep]] 11.0+
- GNU Find
- (Optional) [[https://github.com/sharkdp/fd][fd]] 7.3.0+ (known as ~fd-find~ on Debian, Ubuntu & derivatives) --
  improves performance for many file indexing commands

Additionally, the =doom= executable (located at ~user-emacs-directory/bin/doom~)
can be called with the =doctor= argument to obtain information of possible
missing dependencies used by the modules.

** Steps

First, clone this repository in your ~DOOMDIR~. ~DOOMDIR~ is an environment variable
that points to the location of your private configuration. If ~DOOMDIR~ does not
exist, =doom= will look for your configuration in =doom.d=.

#+begin_src shell :tangle no
export DOOMDIR=/path/to/doom/dir
#+end_src

With the following command you can clone the repository in either case:

#+begin_src shell :tangle no
git clone https://github.com/danilevy1212/doom.git ${DOOMDIR:-~/.doom.d}
#+end_src

Then, just follow the instructions for installing [[https://github.com/hlissner/doom-emacs#install][doom emacs]]. In case you have
set ~DOOMDIR~, make sure to run ~doom env~ before ~doom install~.

* Configuration

Blocks preceded with =IE= are just examples that are not evaluated, the rest of
the blocks are put in the filename of the corresponding heading.

** init.el

This file controls what Doom modules are enabled and what order they load
in. Remember to run ~doom sync~ after modifying it!

*** Lexical binding.

Emacs lisp by default has dynamic-scope, which is fine if a little weird. However,
dynamic scope comes with a performance penalty. Optional lexical scope has to be
activated with a file parameter, as such:

#+begin_src elisp :tangle init.el
;;; $DOOMDIR/init.el -*- lexical-binding: t; -*-
#+end_src

This option must be set in each individual file, so it's hardly the last
time we will use these block of code.

*** TODO ~doom!~ modules

The ~doom!~ macro controls which modules are loaded into Emacs. Modules are
package configurations made by the community. In the spirit of Emacs, all the
configuration that comes with a particular module can be extended or even
overwritten by your private configuration.

Modules are open for discovery. Press =SPC h d h= (or =C-h d h= for
non-vim users) to access Doom's documentation. There you'll find a =Module Index=
link where you'll find a comprehensive list of Doom's modules and what
flags they support.

Alternatively, press =gd= (or =C-c c d=) on a module to browse its directory
(for easy access to its source code).

The ~doom!~ macro is capable of some conditional logic, thanks to the ~:if~ and
~:cond~ keywords.  Unfortunately, these keywords are not well documented beyond
and example in the docs. The rest of the keywords match with a directory location.
The symbols following a keyword are a module that reside in said directory.

A module is structurally similar to the ~$DOODIR~ folder. Defines a ~packages.el~ and
~config.el~, plus some extra files that integrates with =autoloads= or =doctor=.  Some
modules come with a ~README.org~ for documentation purposes, others are not, so
it's important to take a look at the source code, see what they define and
configure, before deciding to use a module.

Some modules can be wrapped in a list and given 'flags', that activate extra
optional configuration. The list must have the module name as the head, the flags
as the tail.

**** :input

In the ~japanese~ module only ~pangu spacing~ seems like a package I could use, so I
rather install it standalone.

#+begin_src elisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

**** :completion

***** Company Mode

In my opinion, this package offers such a boost in productivity it's almost
essential. Sure, the overlay can be distracting for some, but it's
unobtrusive and optional while being a good tool for
discoverability.

#+begin_src elisp :tangle init.el
       :completion
       (company +childframe)  ; the ultimate code completion backend
#+end_src

Doom offers a bunch of neat little extras. For starters, =+childframe= flag
configures the company overlay to live in its own frame, which looks nicer
in the GUI.

By default, completion starts after a short idle period or with the
=C-SPC= key. While the popup is visible, the following keys are available:

| Keybind | Description                              |
|---------+------------------------------------------|
| =C-n=   | Go to next candidate                     |
| =C-p=   | Go to previous candidate                 |
| =C-j=   | (evil) Go to next candidate              |
| =C-k=   | (evil) Go to previous candidate          |
| =C-h=   | Display documentation (if available)     |
| =C-u=   | Move to previous page of candidates      |
| =C-d=   | Move to next page of candidates          |
| =C-s=   | Filter candidates                        |
| =C-S-s= | Search candidates with helm/ivy          |
| =C-SPC= | Complete common                          |
| =TAB=   | Complete common or select next candidate |
| =S-TAB= | Select previous candidate                |

In the spirit of Vim's omni completion, the following insert mode key binds are
available to evil users to access specific company backend:

| Keybind   | Description                       |
|-----------+-----------------------------------|
| =C-x C-]= | Complete etags                    |
| =C-x C-f= | Complete file path                |
| =C-x C-k= | Complete from dictionary/keyword  |
| =C-x C-l= | Complete full line                |
| =C-x C-o= | Invoke complete-at-point function |
| =C-x C-n= | Complete next symbol at point     |
| =C-x C-p= | Complete previous symbol at point |
| =C-x C-s= | Complete snippet                  |
| =C-x s=   | Complete spelling suggestions     |

Completion candidates are supplied by the functions defined in
~company-backends~. Doom offers a helper macro, ~set-company-backend!~ to change
the value of a ~company-backends~ for a specific major/minor mode locally in the
buffer.  Some examples of how to use it can be found in the
~set-company-backend!~ documentation.

***** Ivy

Another super useful package. Ivy is a completion engine that looks deceptively
simple. Creating new search types is simple through it's [[https://oremacs.com/swiper/#api][API]] and has a lot of
community packages that extend it. Ivy also comes with its own Info node where
it details more of its functionality.

This module offers a lot unique search commands through the =SPC s= and =SPC f=
prefixes. If the commands come prefixed with the universal command (=SPC u=),
their result with include hidden files.

For use evil users, it also offers a nice ex-command:

| ex command             | description                                                      |
|------------------------+------------------------------------------------------------------|
| ~:pg[rep][!] [query]~  | search project (if ~!~, include hidden files)                    |
| ~:pg[rep]d[!] [query]~ | search from current directory (if ~!~, don't search recursively) |

The optional `!` is equivalent to the universal argument for the previous
commands.

We take icons with the flags:

+ +icons :: all-the-icons niceties in the ivy buffer.
+ +prescient :: Order candidate by selection frequency.

#+begin_src elisp :tangle init.el
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +icons +prescient)        ; a search engine for love and life
#+end_src

**** :ui

***** That *DOOM* feel.

Most of what makes doom feel like doom is in the =doom=, =doom-dashboard= and =doom-quit=.

#+begin_src elisp :tangle init.el
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
#+end_src

***** emoji

Not really necessary, but they are fun. Use the ~emojify-insert-emoji~ function
(=SPC i e=) to insert and emoji and ~emojify-apropos-emoji~ to search for them.

#+begin_src elisp :tangle init.el
       (emoji +unicode)  ; 🙂
#+end_src

***** hl-todo

=hl-todo= not highlights `TODO` comments in buffers, but also comes some handy
keybindings:

| keybind   | description                      |
|-----------+----------------------------------|
| =]t=      | go to next TODO item             |
| =[t=      | go to previous TODO item         |
| =SPC p t= | show all TODO items in a project |
| =SPC s p= | search project for a string      |
| =SPC s b= | search buffer for string         |


#+begin_src elisp :tangle init.el
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
#+end_src

***** hydra

The =hydra= module activates a convenient hydras for window controls and text
zoom level.

#+begin_src elisp :tangle init.el
       hydra
#+end_src

***** ligatures

When using ~emacs-major-version >= 28~, enable ligatures, since they can be
composed by =hardfuzz=.

#+begin_src elisp :tangle init.el
       ;; indent-guides     ; highlighted indent columns
       (:if (>= emacs-major-version 28) ligatures)         ; ligatures and symbols to make your code pretty again
#+end_src

***** Mode line

Doom ain't doom without its mode line.

#+begin_src elisp :tangle init.el
       ;; minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
#+end_src

***** nav-flash

To help with getting lost in big buffers, use the =nav-flash= module:

#+begin_src elisp :tangle init.el
       nav-flash         ; blink cursor line after big motions
#+end_src

***** ophints

This module give a visual hint when selecting or doing operations over text-objects.

#+begin_src elisp :tangle init.el
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
#+end_src

***** popup

Using ~display-buffer-alist~ under the hood, =doom= has an emergent window (or
pop-up) management system. It is [[https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/popup/README.org][well documented]], and offers an API to
arbitrarily extend it.

#+begin_src elisp :tangle init.el
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
#+end_src

***** treemacs

A modern, beautiful and extensible project file editor, what is not to love?

#+begin_src elisp :tangle init.el
       treemacs          ; a project drawer, like neotree but cooler
#+end_src

***** unicode

This module is based on [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]], which tries to cover as many glyphs as
possible with system fonts. It needs the following fonts in the system:

    - DejaVu Sans, Dejavu Mono :: [[https://dejavu-fonts.github.io/Download.html][Download]]
    - Quivira :: [[http://www.quivira-font.com/downloads.php][Download]]
    - Symbola :: [[https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/Symbola.zip][Download]]
    - Noto Sans, Noto Sans Symbols :: [[http://www.google.com/get/noto/][Download]]

Follow [[https://medium.com/source-words/how-to-manually-install-update-and-uninstall-fonts-on-linux-a8d09a3853b0][this guide]] to install the fonts on Linux.

#+begin_src elisp :tangle init.el
       unicode           ; extended unicode support for various languages
#+end_src

***** vc-gutter

This module integrates with git to show hinges on the side of the buffer that
indicate the difference between its contents and the version control version.

#+begin_src elisp :tangle init.el
       vc-gutter         ; vcs diff in the fringe
#+end_src

***** vi-tilde-fringe

Add a small =~= indicating an empty line, like vi.

#+begin_src elisp :tangle init.el
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
#+end_src

***** window select

Configuration for =ace-window= and =winum=. These packages associate windows in the
frame with number, offering a quick and convenient way of selecting a
specific window in the frame.

To use =ace-window= use =C-w C-w=. You can short-cut to the associated window number
using =winum=, with =SPC w {window number}=.

#+begin_src elisp :tangle init.el
       (window-select +numbers)     ; visually switch windows
#+end_src

***** workspaces

Workspaces is a wrapper over ~persp-mode~. It offers isolated buffers and windows
setups that can be saved into a file a loaded for persistent configurations.
Commands associated with workspaces are under the =SPC TAB= prefix.

It also has a [[https://github.com/hlissner/doom-emacs/tree/develop/modules/ui/workspaces][API]] for programmatic access.

#+begin_src elisp :tangle init.el
       workspaces        ; tab emulation, persistence & separate workspaces
#+end_src

***** zen

Using ~writeroom-mode~, changes the UI elements of a buffer so its contents
become the main focus. It can be toggled on and off with =SPC t z=.

#+begin_src elisp :tangle init.el
       zen               ; distraction-free coding or writing
#+end_src

**** :editor

***** evil

I prefer vim's keybindings to Emacs and thankfully, =doom= offers first class
support for ~evil-mode~, a vim emulator inside Emacs, making it easy to get the
benefits of both Emacs and vim.

#+begin_src elisp :tangle init.el
       :editor
       (evil +everywhere); come to the dark side, we have cookies
#+end_src

=doom= comes with emulation for some popular vim plugins:


| Vim Plugin            | Emacs Plugin                   | Keybind(s)                     |
|-----------------------+--------------------------------+--------------------------------|
| vim-commentary        | evil-nerd-commenter            | omap =gc=                        |
| vim-easymotion        | evil-easymotion                | omap =gs=                        |
| vim-lion              | evil-lion                      | omap =gl= / =gL=                   |
| vim-seek or vim-sneak | evil-snipe                     | mmap =s= / =S=, omap =z= / =Z= & =x= / =X= |
| vim-surround          | evil-embrace and evil-surround | vmap =S=, omap =ys=                |

Along with some extra text objects:

+ =a= C-style function arguments (provided by ~evil-args~)
+ =B= any block delimited by braces, parentheses or brackets (provided by
  ~evil-textobj-anyblock~)
+ =c= Comments
+ =f= For functions (but relies on the major mode to have sane definitions for
  ~beginning-of-defun-function~ and ~end-of-defun-function~)
+ =g= The entire buffer
+ =i j k= by indentation (=k= includes one line above; =j= includes one line
  above and below) (provided by ~evil-indent-plus~)
+ =q= For quotes (any kind)
+ =u= For URLs
+ =x= XML attributes (provided by ~exato~)

And custom Ex commands.

| Ex Command          | Description                                                                        |
|---------------------+------------------------------------------------------------------------------------|
| ~:@~                  | Apply macro on selected lines                                                      |
| ~:al[ign][!] REGEXP~  | Align text to the first match of REGEXP. If BANG, align all matches on each line   |
| ~:cp[!] NEWPATH~      | Copy the current file to NEWPATH                                                   |
| ~:dash QUERY~         | Look up QUERY (or the symbol at point) in dash docsets                             |
| ~:dehtml [INPUT]~     | HTML decode selected text / inserts result if INPUT is given                       |
| ~:enhtml [INPUT]~     | HTML encode selected text / inserts result if INPUT is given                       |
| ~:iedit REGEXP~       | Invoke iedit on all matches for REGEXP                                             |
| ~:k[ill]all[!]~       | Kill all buffers (if BANG, affect buffer across workspaces)                        |
| ~:k[ill]b~            | Kill all buried buffers                                                            |
| ~:k[ill]m[!] REGEXP~  | Kill buffers whose name matches REGEXP (if BANG, affect buffers across workspaces) |
| ~:k[ill]o~            | Kill all other buffers besides the selected one                                    |
| ~:k[ill]~             | Kill the current buffer                                                            |
| ~:lo[okup] QUERY~     | Look up QUERY on an online search engine                                           |
| ~:mc REGEXP~          | Invoke multiple cursors on all matches for REGEXP                                  |
| ~:mv[!] NEWPATH~      | Move the current file to NEWPATH                                                   |
| ~:na[rrow]~           | Narrow the buffer to the selection                                                 |
| ~:pad~                | Open a scratch pad for running code quickly                                        |
| ~:ral[ign][!] REGEXP~ | Right-Align text that matches REGEXP. If BANG, align all matches on each line      |
| ~:repl~               | Open a REPL and/or copy the current selection to it                                |
| ~:retab~              | Convert indentation to the default within the selection                            |
| ~:rev[erse]~          | Reverse the selected lines                                                         |
| ~:rm[!] [PATH]~       | Delete the current buffer's file and buffer                                        |
| ~:tcd[!]~             | Send =cd X= to tmux. X = the project root if BANG, X = ~default-directory~ otherwise   |

***** file-templates

Like =yas-snippets=, but for empty files. Includes a mechanism to insert software
licenses as well, through ~M-x +file-templates/insert-license~. The module
documentation gives extra information on customization of the snippets.

#+begin_src elisp :tangle init.el
       file-templates    ; auto-snippets for empty files
#+end_src

***** fold

#+begin_src elisp :tangle init.el
       fold              ; (nigh) universal code folding
#+end_src

#+begin_quote
This module marries hideshow, vimish-fold and outline-minor-mode to bring you
marker, indent and syntax-based code folding for as many languages as possible.
#+end_quote

Some keybindings include:

| Keybind | Description               |
|---------+---------------------------|
| =z f=     | Fold region               |
| =z o=     | Unfold region             |
| =z a=     | Toogle fold               |
| =z d=     | Delete folded region      |
| =z m=     | Refold all regions        |
| =z r=     | Unfold all regions        |
| =z E=     | Delete all folded regions |
| =z j=     | Jump to next fold         |
| =z k=     | Jump to previous fold     |

***** lispy

Lisp aware vim, brought to you by [[https://github.com/noctuid/lispyville][lispyville]]. It brings changes to evil's
movement and text objects in lisps. Only bad thing is that =evil-goggles= doesn't
work with =lispyville='s commands. Bummer.

=lispyville= is automatically activated for:

- Common Lisp
- Emacs Lisp
- Scheme
- Racket
- [[http://docs.hylang.org/en/stable/][Hy]]
- [[http://lfe.io/][LFE]]
- Clojure

#+begin_src elisp :tangle init.el
       ;;format          ; automated prettiness
       ;;god             ; run Emacs commands without modifier keys
       lispy             ; vim for lisp, for people who don't like vim
#+end_src

***** parinfer

#+begin_quote
Parinfer is a proof-of-concept editor mode for Lisp programming languages. It
will infer some changes to keep Parens and Indentation inline with one another.

https://raw.githubusercontent.com/DogLooksGood/parinfer/a7c041454e05ec2b88333a73e72debaa671ed596/images/demo.gif
#+end_quote

Basically, it's a another editing helper package for lisp, in particular:

- Emacs Lisp
- Clojure
- Scheme
- Lisp
- Racket
- Hy

#+begin_src elisp :tangle init.el
       ;;multiple-cursors    ; editing in many places at once
       ;;objed               ; text object editing for the innocent
       parinfer              ; turn lisp into python, sort of
#+end_src

***** snippets

#+begin_quote
This module adds snippets to Emacs, powered by yasnippet.
#+end_quote

#+begin_src elisp :tangle init.el
       ;;rotate-text     ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
#+end_src

***** word-wrap

#+begin_quote
This module adds a minor-mode ~+word-wrap-mode~, which intelligently wraps long
lines in the buffer without modifying the buffer content.
#+end_quote

#+begin_src elisp :tangle init.el
       word-wrap         ; soft wrapping with language-aware indent
#+end_src

**** :emacs

***** editor

#+begin_src elisp :tangle init.el
       :emacs
       (dired +icons)    ; making dired pretty [functional]
#+end_src

=dired-mode=, as configured in the =dired= module, has only a few extra bells and
whistles added. Apart from aesthetic stuff, there are some extra keybindings:

| Keybind | Description                |
|---------+----------------------------|
| =SPC f d= | Find directory with dired  |
| =q=       | Exit dired buffer          |
| =C-c C-r= | Run =dired-rsync=            |
| =C-c C-e= | Rename entries with =wdired= |

This complement the [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][default keybindings]].

***** electric

Built-in automated indentation.

#+begin_src elisp :tangle init.el
       electric          ; smarter, keyword-based electric-indent
#+end_src

***** ibuffer

Project-aware buffer management.  Similar to =dired=, but for buffers.
Toggled on by the ~SPC b i~ keybinding.

#+begin_src elisp :tangle init.el
       (ibuffer +icons)  ; interactive buffer management
#+end_src

***** undo

#+begin_quote
This module augments Emacs' built-in undo system to be more intuitive and to
persist across Emacs sessions.
#+end_quote

This module uses [[https://github.com/emacsmirror/undo-fu][undo-fu]] to keep a history of editing changes.

#+begin_src elisp :tangle init.el
       undo              ; persistent, smarter undo for your inevitable mistakes
#+end_src

***** vc

#+begin_quote
This module augments Emacs built-in version control support and provides better integration with git
#+end_quote

It offers different modes for ~.git{ignore,info,attributes,config} files, a way
to easily visit the remote file of a repo, ~M-x browse-at-remote~, bind to ~SPC g o o~.

#+begin_src elisp :tangle init.el
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

**** :term

***** eshell

An =emacs= alternative to the traditional shell. From this shell, you have access to all of Emacs internal functions and variables. The features of the =eshell= are too many to [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][explain here]].

#+begin_src elisp :tangle init.el
       :term
       eshell            ; the elisp shell that works everywhere
#+end_src

***** vterm

A traditional terminal emulator, powered by [[https://github.com/neovim/libvterm][libvterm]] and Emacs [[https://phst.eu/emacs-modules.html][c modules]].

#+begin_src elisp :tangle init.el
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs
#+end_src

**** :checkers

***** syntax

Setup [[https://www.flycheck.org/en/latest/][flycheck]], the unofficial general programming language checker of Emacs.

#+begin_src elisp :tangle init.el
       :checkers
       (syntax +childframe) ; tasing you for every semicolon you forget
#+end_src

***** spell

Don't misspell, ever again!

#+begin_src elisp :tangle init.el
       (spell +aspell +everywhere)             ; tasing you for misspelling mispelling
#+end_src

***** grammar

#+begin_quote
This module adds grammar checking to Emacs to aid your writing by combining
=lang-tool= and =writegood-mode=.
#+end_quote

My english is not the best, neither is my spanish or my 日本語 for that matter. Maybe this module can help!

#+begin_src elisp :tangle init.el
       grammar           ; tasing grammar mistake every you make
#+end_src

**** TODO :tools

#+begin_src elisp :tangle init.el
       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       (docker +lsp)
       editorconfig        ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists

#+end_src

***** TODO lookup

#+begin_quote
This module adds code navigation and documentation lookup tools to help you
quickly look up definitions, references, documentation, dictionary definitions
or synonyms.

+ Jump-to-definition and find-references implementations that just work.
+ Powerful xref integration for languages that support it.
+ Search online providers like devdocs.io, stackoverflow, google, duckduckgo or
  youtube (duckduckgo and google have live suggestions).
+ Integration with Dash.app docsets.
+ Support for online (and offline) dictionaries and thesauruses.
#+end_quote

#+begin_src elisp :tangle init.el
       (lookup +docsets +dictionary +offline)              ; navigate your code and its documentation
       (lsp +peek)
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

**** :os

***** tty

Better integration of Emacs with the terminal emulator, particularly:

#+begin_quote
+ System clipboard integration (through an external clipboard program or OSC-52
  escape codes in supported terminals).
+ Fixes cursor-shape changing across evil states in terminal that support it.
+ Mouse support in the terminal.

#+end_quote

#+begin_src elisp :tangle init.el
       :os
       ;;(:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience
#+end_src

**** TODO :lang

#+begin_src elisp :tangle init.el
       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       (clojure +lsp)      ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; Emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       (haskell +lsp)      ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       (json +lsp)              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here)))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright) ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
#+end_src


***** rust

Rustic mode is great and the integrates really well with cargo. The defaults are
reasonable and with the =+lsp= it integrates nicely with ~lsp-mode~, what's not to
love?

#+begin_src elisp :tangle init.el
       (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
#+end_src

****** Dependencies:

Requires [[https://github.com/rust-lang/rls][rls]] or [[https://rust-analyzer.github.io/manual.html#installation][rust-analyzer]], both obtainable with [[https://github.com/rust-lang/rustup][rustup]]. I always use =rls=.

***** TODO sh

#+begin_src elisp :tangle init.el
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
#+end_src

***** TODO web

#+begin_src elisp :tangle init.el
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp)          ; the tubes
       (yaml +lsp)         ; JSON, but readable
#+end_src

**** TODO :email

#+begin_src elisp :tangle init.el
       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)
#+end_src

**** TODO :app

#+begin_src elisp :tangle init.el
       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; Emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
#+end_src

**** :config

***** literate

The meat and potatoes of this configuration. This module [[https://orgmode.org/manual/Extracting-Source-Code.html][tangles]] the source code blocks in ~$DOOMDIR/config.org~.

#+begin_src elisp :tangle init.el
       :config
       literate
#+end_src

***** Better Defaults

#+begin_quote
This module provides a set of reasonable defaults, including:

+ A Spacemacs-esque keybinding scheme
+ Extra Ex commands for evil-mode users
+ A yasnippet snippets library tailored to Doom emacs
+ A configuration for (almost) universally repeating searches with =;= and =,=
#+end_quote

Alongside the reasonable defaults, this module offers tons of convenience commands, under the ~+default/~ prefix.

#+begin_src elisp :tangle init.el
       (default +bindings +smartparens))
#+end_src

** packages.el

*** How does packages.el work?

To install a package with Doom you must declare them here and run ~doom sync~
on the command line, then restart Emacs for the changes to take effect -- or
use ~M-x doom/reload~.

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:

ie:
#+begin_src elisp :tangle no
(package! some-package)
#+end_src

To install a package directly from a remote git repo, you must specify a
~:recipe~. You'll find documentation on what ~:recipe~ accepts here:
https://github.com/raxod502/straight.el#the-recipe-format

ie:
#+begin_src elisp :tangle no
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a =PACKAGENAME.el=
file, or is located in a sub-directory of the repository, you'll need to specify
~:files~ in the ~:recipe~:

ie:
#+begin_src elisp :tangle no
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

If you'd like to disable a package included with Doom, you can do so here
with the ~:disable~ property:

ie:
#+begin_src elisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built-in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

ie:
#+begin_src elisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

ie:
#+begin_src elisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't ~master~ (which
our package manager can't deal with; see raxod502/straight.el#279)

ie:
#+begin_src elisp :tangle no
(package! builtin-package :recipe (:branch "develop"))
#+end_src

Use ~:pin~ to specify a particular commit to install.
ie:
#+begin_src elisp :tangle no
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src

Doom's packages are pinned to a specific commit and updated from release to
release. The ~unpin!~ macro allows you to unpin single packages...

ie:
#+begin_src elisp :tangle no
(unpin! pinned-package)
; ...or multiple packages
(unpin! pinned-package another-pinned-package)
; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
(unpin! t)
#+end_src

*** Declarations

For convenience, packages are declared in code blocks close to their
configuration code blocks. Package declaration blocks actually go to into
=packages.el=.  Package declarations blocks can be distinguished for only
containing the ~package!~ macro.

We don't permit the ~package.el~ file to be byte compiled and declare its
lexical binding.

#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; lexical-binding:t; -*-
;;; $DOOMDIR/packages.el
#+end_src

** Auto-load folder

Auto-loads blocks go into different files in the =autoload= folder.  In this folder
there are files which define functions that and values that whose evaluation is
the entry point into loading other packages. This permits packages to be loaded
exactly when they are needed.

This is all made possible thanks to the auto-load cookie: ~;;;###autoload~.
Placing this on top of a lisp form will do one of two things:

1. Add a ~autoload~ call to Doom's auto-load file (found in
   =~/.emacs.d/.local/autoloads.el=, which is read very early in the startup
   process).
2. Or copy that lisp form to Doom's auto-load file verbatim (usually the case for
   anything other than ~def*~ forms, like ~defun~ or ~defmacro~).

Doom's auto-load file is generated by scanning these files when you execute ~doom
sync~.

As with package declarations blocks, auto-load code blocks will be placed close
to their related configuration blocks. These will be placed in an auto-load
subheading within the corresponding package heading.

** config.el

Most of the configuration actually takes place here. In =config.el= we further
customize the packages from the different modules and in =packages.el=. In other
words, the real fun starts here.  As always, we start by declaring the lexical
binding:

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

*** Customize Group

An essential interface to know what to customize!

#+begin_src elisp
(use-package! cus-edit
  :defer t
#+end_src

I use it to know the customizable options in a package, changing the
values within this configuration. So, let's make it show the actual real values.

#+begin_src elisp
  :custom
  (custom-unlispify-menu-entries nil)
  (custom-unlispify-tag-names nil)
  (custom-unlispify-remove-prefixes nil))
#+end_src

*** Default font

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

ie:
#+begin_src elisp :tangle no
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

Let's _choose_ our *monospaced* font, /Hack/ goodness:

#+begin_src elisp
(setq doom-font (font-spec :family "Hack" :size 16))
#+end_src

And our =variable pitch= +font+, ~DejaVu Sans~:

#+begin_src elisp :tangle no
(setq doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 20))
#+end_src

Comments and keywords should pop more...

#+begin_src elisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

When in zen mode, scale text just a bit.

#+begin_src elisp
(after! writeroom-mode
  (setq +zen-text-scale 1.25))
#+end_src

Not everything fits in the =mode line=, so let's make fonts and icons smaller:

#+begin_src elisp
(custom-set-faces!
  '(mode-line :family "Hack" :height 0.95)
  '(mode-line-inactive :family "Hack" :height 0.95))

(after! all-the-icons
  (setq all-the-icons-scale-factor 1.1))
#+end_src

The filename in the =mode line= occupies way too much space.

#+begin_src elisp
(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project))
#+end_src

*** Default theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-nord)
#+end_src

**** Nord powered aesthetics.

Let's add some small customizations to make everything a bit brighter and bigger:

#+begin_src elisp
(use-package! doom-nord-theme
  :defer t
  :custom
  (doom-nord-brighter-modeline t)
  (doom-nord-padded-modeline t)
  (doom-nord-region-highlight 'frost))
#+end_src

*** Dired

One thing really missing from the default configuration of =dired= is an easy
way to move up and down from directories.

#+begin_src elisp
(after! dired
  (map! :map dired-mode-map
        :m "h" #'dired-up-directory
        :m "l" #'dired-find-file)
#+end_src

Most of the information =dired= throws at you is not really necessary, so let's
hide it by default. One can toggle this information on/off with ~(~ keybinding.

#+begin_src elisp
  (add-hook! dired-mode #'dired-hide-details-mode)
#+end_src

But, do show git information on repositories by default, can be toggled on/off with ~)~.

#+begin_src elisp
   (add-hook! 'dired-after-readin-hook #'+dired-enable-git-info-h))
#+end_src

Opening files from =dired= with an external program is a bit of drag by default, so
we add the =dired-open= package to take care of that.

#+begin_src elisp :tangle packages.el
(package! dired-open)
#+end_src

The variable ~dired-open-guess-shell-alist~ determines if the file is opened with
an external program.

#+begin_src elisp
(use-package! dired-open
  :after dired
  :custom
  (dired-open-functions (list #'dired-open-guess-shell-alist
                              #'dired-open-by-extension
                              #'dired-open-subdir))
  (dired-guess-shell-alist-user '(("\\.\\(?:docx\\|pdf\\|djvu\\|eps\\)\\'" "xdg-open")
                                  ("\\.\\(?:jpe?g\\|png\\|gif\\|xpm\\)\\'" "xdg-open")
                                  ("\\.\\(?:xcf\\)\\'" "xdg-open")
                                  ("\\.csv\\'" "xdg-open")
                                  ("\\.tex\\'" "xdg-open")
                                  ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\|mov\\)\\(?:\\.part\\)?\\'" "xdg-open")
                                  ("\\.\\(?:mp3\\|flac\\)\\'" "xdg-open")
                                  ("\\.html?\\'" "xdg-open")
                                  ("\\.md\\'" "xdg-open"))))
#+end_src

*** Dotenv

Emacs is missing a mode to edit =.env= files. So let's add it one:

#+begin_src elisp :tangle packages.el
(package! dotenv-mode)
#+end_src

Now let's activate it when opening a =.env=:

#+begin_src elisp
(use-package! dotenv-mode
  :mode ("\\.env\\.?.*\\'" . dotenv-mode))
#+end_src

*** eshell

The keybinding =M-SPC m b= inserts the name of a buffer in the =eshell= syntax.
However, sometimes it's useful to refer to the buffer by its string name
representation. So let's make an extra keybinding for said case:

#+begin_src elisp
(after! eshell
  (map! :map eshell-mode-map
        (:localleader
         :desc "Insert Symbolic Buffer Name" "B" #'eshell-insert-buffer-name
         :desc "Insert String Buffer Name" "b" #'dan/eshell-insert-buffer-name)))
#+end_src

**** Auto-loads

Here I define the slightly modified version of ~eshell-insert-buffer-name~.

#+begin_src elisp :tangle autoload/eshell.el :mkdirp yes
;;; $DOOMDIR/autoload/eshell.el -*- lexical-binding: t; -*-

;;;###autoload
(defun dan/eshell-insert-buffer-name (buffer-name)
  "Insert BUFFER-NAME into the current buffer at point.

The BUFFER-NAME is given as string surrounded by \"\"."
  (interactive "BName of buffer: ")
  (insert-and-inherit "\"" buffer-name "\""))
#+end_src

*** Hydra

Let's make the =hydra= module's functions easily accessible:

#+begin_src elisp
(map! :leader
      :desc "Navigate/Hydra"  :m "w N" #'+hydra/window-nav/body
      :desc "Text-Zoom/Hydra" :m "w f" #'+hydra/text-zoom/body)
#+end_src

*** Language Tool

Do not run the jar file! Run the binary.

#+begin_src elisp
(setq langtool-bin "languagetool-commandline")
#+end_src

Most of the time, assume I speak English.

#+begin_src elisp
(setq langtool-mother-tongue "en")
#+end_src

*** Line-numbers

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

*** Modeline

The default =doom-modeline= is great, the only thing is that I want it to show me
the evil state I am in with a letter instead of an icon:

#+begin_src elisp
(use-package! doom-modeline
  :defer t
  :custom
  (doom-modeline-modal-icon nil))
#+end_src

We would like to display the battery icon in the mode line, but only if I am in
a laptop:

#+begin_src elisp
(use-package! battery
  :after-call doom-modeline-mode
  :config
  (when (and battery-status-function
             (not (string-match-p "N/A"
                                  (battery-format "%B"
                                                  (funcall battery-status-function)))))
    (display-battery-mode)))
#+end_src

*** Mozc (Japanese Input) DEPRECATED.

#+begin_quote
Nowadays I use Ibus with the XIM overlay for this, which gets rid of the dependency with mozc_emacs_helper.
#+end_quote

I am learning Japanese as a hobby, and I do most of my note taking in Emacs. To
input Japanese text we use Google's Mozc.

#+begin_src elisp :tangle no
(package! mozc
  :recipe (:files ("src/unix/emacs/*.el")))
#+end_src

Let's lazy load Mozc, so it loads only when our entry function is called.

#+begin_src elisp :tangle no
(use-package! mozc
  :defer t
#+end_src

The overlay style is sluggish, the echo-area style is pretty and functional, it even works in the mini-buffer!

#+begin_src elisp :tangle no
  :custom
  (mozc-candidate-style 'echo-area))
#+end_src

Finally, we create a keybinding activate ~mozc-mode~.

#+begin_src elisp :tangle no
(map! :g "C-x j"  #'dan/toggle-mozc-mode
      :ni "C-x j" #'dan/toggle-mozc-mode)
#+end_src

**** Auto-loads

Lexical binding.

#+begin_src elisp :tangle no
;;; $DOOMDIR/autoload/mozc.el -*- lexical-binding: t; -*-
#+end_src

First, let's define our toggle function and lazily load it. Activates ~mozc-mode~
and changes the mode line to show it.

#+begin_src elisp :tangle no
;;;###autoload
(defun dan/toggle-mozc-mode ()
  "Toggle activation/deactivation of `mozc-mode'."
  (interactive)
  (let* ((active (mozc-mode))
         (msg-modeline (if active
                           '("Activated" . "日本語")
                         '("Deactivated" . ""))))
    (progn
      (message "Mozc Mode %s" (car msg-modeline))
      (setq-local global-mode-string (cdr msg-modeline))
#+end_src

This part of the function is a bit of hack so mozc plays nicely with Doom's
configuration of evil-org.

#+begin_src elisp :tangle no
      (map! (:when (and (featurep 'evil-org) evil-org-mode) :map evil-org-mode-map
             (:when mozc-mode    :i "<return>"   nil)
             (:unless mozc-mode  :i "<return>"   (cmd! (org-return electric-indent-mode)))
             (:when mozc-mode    :i "RET"        nil)
             (:unless mozc-mode  :i "RET"        (cmd! (org-return electric-indent-mode))))))))
#+end_src

*** nvm DEPRECATED

#+begin_quote
NixOS has made this package redundant for me. However, somebody may find this configuration useful so I will keep it.
#+end_quote

=nvm= stands for =n.ode v.ersion m.anager=. At it's core it's just a shell
script that keeps versions of node/npm that can be activated on a per-project
basis.  The =nvm.el= package offers non-interactive functions to interact
with =nvm=. These functions change the ~PATH~ value inside =emacs=, so when =npm=
or =node= are called from it, they are look in the directory =nvm.el= has set.

#+begin_src elisp :tangle no
(package! nvm)
#+end_src

**** Auto-loads

=nvm.el= lacks functions to interactively activate or deactivate a version of
node within Emacs.  Luckily, Emacs is extensible. We'll create our functions in
an auto-loaded file.

#+begin_src elisp :tangle no
;;; $DOOMDIR/autoload/nvm.el -*- lexical-binding: t; -*-
#+end_src

When loading the auto-load file, load the =nvm= module. Essentially, we give

access to the =nvm= package to the auto-loaded functions.

#+begin_src elisp :tangle no
(require 'nvm)
#+end_src

A function to deactivate the current version of node, if it was activated by
=nvm=. Essentially, it removes the modifications =nvm= may have done to PATH
environment variable.

#+begin_src  elisp :tangle no
;;;###autoload
(defun dan/nvm-deactivate ()
  "Deactivate nvm.

This function will restore the enviroment variable PATH to it's value before nvm
was activated.

If nvm wasn't activated previously, PATH will remain unchanged."
  (interactive)
  (when nvm-current-version
    (let* ((path-re (concat "^" (f-join nvm-dir nvm-runtime-re) nvm-version-re "/bin/?$"))
           (node-version-dir (expand-file-name "bin/" (-last-item nvm-current-version)))
           (new-path-list (--reject (s-matches? path-re it) (parse-colon-path (getenv "PATH")))))
      (setenv "PATH" (s-join path-separator new-path-list))
      (setq nvm-current-version nil)
      (message "NVM deactivated. Restored node version to system default."))))
#+end_src

A ~nvm-use-for~ interactive wrapper. If a =.nvmrc= can't be found in ~default-directory~, then prompt user.

#+begin_src elisp :tangle no
;;;###autoload
(defun dan/nvm-use-for ()
  "Activate a node version interactively.

From `default-directory' upwards, a .nvmrc file will be searched to fix the nvm version.
If none is found, the user will be prompted to select an available version of node."
  (interactive)
  (cl-flet ((announce ()
                    (message "Node %s activated" (car nvm-current-version))))
    (condition-case err
        (progn
          (nvm-use-for)
          (announce))
      ('error
       (let* ((node-system-path "/usr/bin/node")
              (node-system (and (file-exists-p node-system-path)
                                (format "System (%s)"
                                              (s-trim (with-temp-buffer
                                                        (call-process-shell-command
                                                         (concat node-system-path " -v") nil t)
                                                        (buffer-string))))))
              (choice (completing-read "Select a Node version:"
                                       (append (nvm--installed-versions) (list node-system)) nil t)))
         (cond
          ((s-equals-p choice node-system) (dan/nvm-deactivate))
          (t (nvm-use choice)
             (announce))))))))
#+end_src

*** Org

One of the killer features of Emacs.

#+begin_src elisp
(use-package! org
    :defer t
#+end_src

If you use ~org~ and don't want your org files in the default location below,
change ~org-directory~. It must be set before org loads!

#+begin_src elisp
    :custom
    (org-directory "~/Cloud/org/")
#+end_src

Set ~org-attach-id-dir~ back to default value.

#+begin_src elisp
    (org-attach-id-dir  "data")
#+end_src

I only use one agenda file, that has all my routine stuff in it.

#+begin_src elisp
    (org-agenda-files  `(,(expand-file-name "agenda.org" org-directory)))
#+end_src

Make emphasis markers auto-hide.

#+begin_src elisp
    (org-hide-emphasis-markers t)
#+end_src

Modules for keeping track of habits and completing checklists.

#+begin_src elisp
    (org-module  '(org-habit org-checklist))
#+end_src

Add custom functions to some org hooks. First, a function that runs when
subheading change KEYWORD state.

#+begin_src elisp
    :config
    (add-hook! 'org-after-todo-statistics-hook #'dan/org-after-todo-statistics-preserve-todo-state)
#+end_src

In org buffers, remove the line number fringe.

#+begin_src elisp
    (add-hook! org-mode (setq-local display-line-numbers nil))
#+end_src

Switch header 'TODO' state to 'DONE' when all checkboxes are ticked, to 'TODO'
otherwise

#+begin_src elisp
    (add-hook! 'org-checkbox-statistics-hook  #'dan/org-checkbox-statistics-change-to-done-when-all-ticked))
#+end_src

**** org-edna

=org-edna= offers more control over how and when tasks change state and manages
dependencies between tasks through extra heading properties.

#+begin_src elisp :tangle packages.el
(package! org-edna)
#+end_src

Load and activate =org-edna= together with org-mode.

#+begin_src elisp
(use-package! org-edna
  :hook
  '(org-mode . org-edna-mode)
#+end_src
Make =org-edna= to trigger in any state change except done.

#+begin_src elisp
  :custom
  (org-edna-from-todo-states 'not-done))
#+end_src

**** Auto-loads

Lexical Binding.

#+begin_src elisp :tangle autoload/org.el :mkdirp yes
;;; $DOOMDIR/autoload/org.el -*- lexical-binding: t; -*-
#+end_src

Define the custom function, switch entry to 'DONE' when all sub-entries are
'DONE', else keep entry original todo state.

#+begin_src elisp :tangle autoload/org.el :mkdirp yes
;;;###autoload
(defun dan/org-after-todo-statistics-preserve-todo-state (n-done n-not-done)
  "Change KEYWORD state to `DONE` if all subheadings are also `DONE`, otherwise
KEYWORD state is conserved.

N-DONE are the number of subheadings that are done and N-NOT=DONE the number of
headings that are not done. This function is meant to be run as as part of
`org-after-todo-statistics-hook`"
  (let (org-log-done org-log-states)
    (org-todo (if (= n-not-done 0)
                  "DONE"
                (pcase (org-get-todo-state) ;; Keeps the keyword state.
                  ('nil "")
                  (todo todo))))))
#+end_src

Custom function that switches heading from 'TODO' to 'DONE' when all checkboxes are ticked.

#+begin_src elisp :tangle autoload/org.el :mkdirp yes
;;;###autoload
(defun dan/org-checkbox-statistics-change-to-done-when-all-ticked ()
  "Change KEYWORD state to `DONE` if all checkboxes of the heading are ticked.

This function is meant to be run as as part of `org-checkbox-statistics-hook`"
  (let ((todo-state (org-get-todo-state)) beg end)
    (unless (not todo-state)
      (save-excursion
        (org-back-to-heading t)
        (setq beg (point))
        (end-of-line)
        (setq end (point))
        (goto-char beg)
        (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                               end t)
            (if (match-end 1)
                (if (equal (match-string 1) "100%")
                    (unless (string-equal todo-state "DONE")
                      (org-todo 'done))
                  (unless (string-equal todo-state "TODO")
                    (org-todo 'todo)))
              (if (and (> (match-end 2) (match-beginning 2))
                       (equal (match-string 2) (match-string 3)))
                  (unless (string-equal todo-state "DONE")
                    (org-todo 'done))
                (unless (string-equal todo-state "TODO")
                  (org-todo 'todo)))))))))
#+end_src

*** Personal information

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src elisp
(setq user-full-name "Daniel Levy Moreno"
      user-mail-address "daniellevymoreno@gmail.com")
#+end_src

***  Prescient

Unfortunately, =doom= doesn't integrate the excellent =prescient= with =company-mode= in its modules like it does for =ivy-mode=. First, we get the =company-prescient= package.

#+begin_src elisp :tangle packages.el
(package! company-prescient)
#+end_src

#+begin_src elisp
(after! company
  (company-prescient-mode))
#+end_src

*** Pretending we are in vim? That's just plain EVIL!

Bad puns aside, vim keybindings are hard to let go once you are used to them.
Luckily, doom comes with much of the heavy lifting already done when it comes to
evil mode. We just gotta customize some minor details.

#+begin_src elisp
(use-package! evil
  :defer t
  :custom
#+end_src

Make horizontal motions move to other lines.

#+begin_src elisp
  (evil-cross-lines t)
#+end_src

Remove highlighted items after search is finished.

#+begin_src elisp
  (evil-ex-search-persistent-highlight nil)
#+end_src

Don't continue commented lines with o/O.

#+begin_src elisp
   (+evil-want-o/O-to-continue-comments nil)
#+end_src

Universal argument mapped to M-u instead.

#+begin_src elisp
  :config
  (map! :g "M-u" #'universal-argument
#+end_src

Remove highlighted items after a search.

#+begin_src elisp
        :m "C-l" #'evil-ex-nohighlight))
#+end_src

*** Projectile

Let's make projectile's life easier by giving it some paths where I normally
store projects.

#+begin_src elisp
(setq projectile-project-search-path '("~/Projects/" "~/.config/"))
#+end_src

*** Rainbow Delimiters

Matching pairs draw with the same face color, making them easily identifiable.

#+begin_src elisp
(add-hook! prog-mode #'rainbow-delimiters-mode-enable)
#+end_src

*** RSS, or how to get news the old-way.

First, lets bring our feeds into the cloud.

#+begin_src elisp
(use-package! elfeed
  :defer t
  :custom
  (elfeed-db-directory "~/Cloud/elfeed/")
#+end_src

Special faces for special tags.

#+begin_src elisp
  (elfeed-search-face-alist '((unread    elfeed-search-unread-title-face)
                              (star      elfeed-search-unread-count-face)))
#+end_src

Show me entries from within a month that I haven't read and that I have 'starred'.

#+begin_src elisp
  :config
  (setq elfeed-search-filter "@4-week-ago +unread ")
#+end_src

Some entries are worth preserving. By 'starring' them we don't lose them.

#+begin_src elisp
  (defalias 'dan/elfeed-search-tag-all-star
          (elfeed-expose #'elfeed-search-tag-all 'star)
          "Add the `star' tag to all selected entries.")

  (defalias 'dan/elfeed-search-untag-all-star
          (elfeed-expose #'elfeed-search-untag-all 'star)
          "Remove the `star' tag from all selected entries.")
#+end_src

Expose the aliases to the =x= keybinding.

    #+begin_src elisp
  (map! :map 'elfeed-search-mode-map :nv "x" #'dan/elfeed-search-tag-all-star
                                  :nv "X" #'dan/elfeed-search-untag-all-star)
#+end_src

Automatically updating feed when opening elfeed.

#+begin_src elisp
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src

Give it an easy keybinding to access it:

#+begin_src elisp
(map! :leader :desc "News feed" :m "o n" #'=rss)
#+end_src

And point elfeed to the org configuration file.

#+begin_src elisp
(use-package! elfeed-org
  :defer t
  :custom
  (rmh-elfeed-org-files (list (expand-file-name "elfeed.org" org-directory))))
#+end_src

Keybinding to easily find the feeds file.

#+begin_src elisp
(map! :leader
      :desc "News feed config" :m "o N" (cmd! (find-file (car rmh-elfeed-org-files))))
#+end_src

*** Rust

Seems like =rls= is more stable than rust-analyzer.

#+begin_src elisp
(use-package! rustic
  :defer t
  :custom
  (rustic-lsp-server 'rust-analyzer)
#+end_src

When using the rustic popup, be in Emacs state.

#+begin_src elisp
  :config
  (when (featurep 'evil)
    (add-hook! 'rustic-popup-mode-hook #'evil-emacs-state)))
#+end_src

*** Splash Screen

Default doom dashboard is pretty and welcoming, let's just give it a small personal touch.

#+begin_src elisp
(setq fancy-splash-image (expand-file-name "img/stallman.png" doom-private-dir))
#+end_src

Paying respects to both the spirit of Emacs and its creator.

#+HTML: <p align="center"><img src="https://raw.githubusercontent.com/danilevy1212/doom/master/img/stallman.png"/></p>

But what if I am in the terminal? No worries:

#+begin_src elisp
(defun dan/my-weebery-is-always-greater ()
  (mapc (lambda (line)
          (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                              'face 'doom-dashboard-banner) " ")
          (insert "\n"))
        '("⢸⣿⣿⣿⣿⠃⠄⢀⣴⡾⠃⠄⠄⠄⠄⠄⠈⠺⠟⠛⠛⠛⠛⠻⢿⣿⣿⣿⣿⣶⣤⡀⠄"
          "⢸⣿⣿⣿⡟⢀⣴⣿⡿⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣿⣿⣿⣷"
          "⢸⣿⣿⠟⣴⣿⡿⡟⡼⢹⣷⢲⡶⣖⣾⣶⢄⠄⠄⠄⠄⠄⢀⣼⣿⢿⣿⣿⣿⣿⣿⣿⣿"
          "⢸⣿⢫⣾⣿⡟⣾⡸⢠⡿⢳⡿⠍⣼⣿⢏⣿⣷⢄⡀⠄⢠⣾⢻⣿⣸⣿⣿⣿⣿⣿⣿⣿"
          "⡿⣡⣿⣿⡟⡼⡁⠁⣰⠂⡾⠉⢨⣿⠃⣿⡿⠍⣾⣟⢤⣿⢇⣿⢇⣿⣿⢿⣿⣿⣿⣿⣿"
          "⣱⣿⣿⡟⡐⣰⣧⡷⣿⣴⣧⣤⣼⣯⢸⡿⠁⣰⠟⢀⣼⠏⣲⠏⢸⣿⡟⣿⣿⣿⣿⣿⣿"
          "⣿⣿⡟⠁⠄⠟⣁⠄⢡⣿⣿⣿⣿⣿⣿⣦⣼⢟⢀⡼⠃⡹⠃⡀⢸⡿⢸⣿⣿⣿⣿⣿⡟"
          "⣿⣿⠃⠄⢀⣾⠋⠓⢰⣿⣿⣿⣿⣿⣿⠿⣿⣿⣾⣅⢔⣕⡇⡇⡼⢁⣿⣿⣿⣿⣿⣿⢣"
          "⣿⡟⠄⠄⣾⣇⠷⣢⣿⣿⣿⣿⣿⣿⣿⣭⣀⡈⠙⢿⣿⣿⡇⡧⢁⣾⣿⣿⣿⣿⣿⢏⣾"
          "⣿⡇⠄⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⠇⠄⠄⢿⣿⡇⢡⣾⣿⣿⣿⣿⣿⣏⣼⣿"
          "⣿⣷⢰⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⢰⣧⣀⡄⢀⠘⡿⣰⣿⣿⣿⣿⣿⣿⠟⣼⣿⣿"
          "⢹⣿⢸⣿⣿⠟⠻⢿⣿⣿⣿⣿⣿⣿⣿⣶⣭⣉⣤⣿⢈⣼⣿⣿⣿⣿⣿⣿⠏⣾⣹⣿⣿"
          "⢸⠇⡜⣿⡟⠄⠄⠄⠈⠙⣿⣿⣿⣿⣿⣿⣿⣿⠟⣱⣻⣿⣿⣿⣿⣿⠟⠁⢳⠃⣿⣿⣿"
          "⠄⣰⡗⠹⣿⣄⠄⠄⠄⢀⣿⣿⣿⣿⣿⣿⠟⣅⣥⣿⣿⣿⣿⠿⠋⠄⠄⣾⡌⢠⣿⡿⠃"
          "⠜⠋⢠⣷⢻⣿⣿⣶⣾⣿⣿⣿⣿⠿⣛⣥⣾⣿⠿⠟⠛⠉⠄⠄          ")))

(when (not (display-graphic-p))
  (setq +doom-dashboard-ascii-banner-fn #'dan/my-weebery-is-always-greater))
#+end_src

*** Snow

A nice, comfy, useless package.

#+begin_src elisp :tangle packages.el
(package! snow)
#+end_src

We define an auto-load function as an entry point to the winter season.

#+begin_src elisp
(use-package! snow
  :commands snow)
#+end_src

*** Treemacs

=treemacs= integrates with =git=. By default, its set to a performance oriented
configuration with limited capabilities. Let's change that.

#+begin_src elisp
(setq +treemacs-git-mode 'deferred)
#+end_src

I don't plan on using =treemacs= to explore directories beyond the project root
directory, that's what =dired= is for. So let's change the default bindings to be
more appropriate to my use case.

=h= to go back up a node and =H= to go up the root.

#+begin_src elisp
(after! treemacs-evil
  (evil-define-key 'treemacs treemacs-mode-map
    "h" #'treemacs-collapse-parent-node
    "H" #'treemacs-root-up
#+end_src

=l= to *expand* a node, =L= to go down the root.

#+begin_src elisp
    "l" #'treemacs-TAB-action
    "L" #'treemacs-root-down))
#+end_src

Use =all-the-icons= theme in =treemacs=, for consistency.

#+begin_src elisp
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

When running ~treemacs-find-file~, the focus remains in the file instead of going
to the =treemacs= buffer. Let's change that.

#+begin_src elisp
(defadvice! dan/treemacs-select-after-find-file (&rest args)
  "Switch focus to the treemacs buffer after calling `treemacs-find-file'."
  :after #'treemacs-find-file
  (treemacs-select-window))
#+end_src

Let's switch the bindings for ~+treemacs/toggle~ and ~treemacs-find-file~.

#+begin_src elisp
(map! :leader
      :desc "Find file in project sidebar" :mv "o p" #'treemacs-find-file
      :desc "Project sidebar" :mv "o P" #'+treemacs/toggle)
#+end_src

*** vc-gutter

Let's add some minor customizations to the =vc-gutter= module:

First, diff the file while the buffer is changing, not just when it's saved.

#+begin_src elisp
(setq +vc-gutter-diff-unsaved-buffer t)
#+end_src

Lastly, let's activate =git-gutter= for remote files as well.

#+begin_src elisp
(setq +vc-gutter-in-remote-files t)
#+end_src

*** Vue

The language server =VLS= does not analyze the templates of ~.vue~ files by default,
let's change that!

#+begin_src elisp
(after! lsp-vetur
  (setq lsp-vetur-experimental-template-interpolation-service t))
#+end_src

*** Web Mode

~web-mode~, as customized in the ~web~ module, has more features that I could
wish for. Indentation is the only sore point I wish to change.

First, text at the beginning of line should not be indented by default.

#+begin_src elisp
(after! web-mode
  (setq web-mode-indent-style 1
#+end_src

The default indentation is of 2 spaces.

#+begin_src elisp
    web-mode-code-indent-offset 2
    web-mode-css-indent-offset 2
    web-mode-markup-indent-offset 2
#+end_src

And no padding!

#+begin_src elisp
    web-mode-part-padding nil
    web-mode-script-padding nil))
#+end_src

*** Which Key

Doom Emacs default configuration is too slow, lets speed it up.

#+begin_src elisp
(use-package! which-key
  :defer t
  :custom
  (which-key-idle-delay 0.1)
  (which-key-idle-secondary-delay 0.2))
#+end_src

*** Word wrap

I work with lots of files that have long lines, which can be hard to read
sometimes. ~+word-wrap-mode~ helps to make these files more readable without
changing the buffer contents.

#+begin_src elisp
(+global-word-wrap-mode +1)
#+end_src

** Private modules.

=doom= allows the user to [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#writing-your-own-modules][to write their own modules]] in their ~$DOOMDIR~
directory, which will be auto-loaded at startup. It offers an extra features
like interaction and extension of ~bin/doom~, a fixed file structure where each
file is loaded at different points of the runtime and other niceties (more
~macros!~).

For now, I haven't had the need to use this feature but is good to be aware of it.
