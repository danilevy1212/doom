#+TITLE: Dan's DOOM emacs config


* TODO Rationale

** TODO My vainilla emacs adventures

** TODO Why Doom?

[[https://blog.jethro.dev/posts/migrating_to_doom_emacs/][It's easy once you know what you are doing.]]

* Installation

** TODO Prerequesites

* Configuration

Blocks preceded with =IE= are just examples that are not evaluated, the rest of the blocks are put in the filename of the corresponding heading.

** TODO init.el

** package.el

*** Lexical binding

#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

*** How does package.el work?

To install a package with Doom you must declare them here and run ~doom sync~
on the command line, then restart Emacs for the changes to take effect -- or
use ~M-x doom/reload~.

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:

IE:
#+begin_src elisp :tangle no
(package! some-package)
#+end_src

To install a package directly from a remote git repo, you must specify a
~:recipe~. You'll find documentation on what ~:recipe~ accepts here:
https://github.com/raxod502/straight.el#the-recipe-format

IE:
#+begin_src elisp :tangle no
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
~:files~ in the ~:recipe~:

IE:
#+begin_src elisp :tangle no
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))   
#+end_src

If you'd like to disable a package included with Doom, you can do so here
with the ~:disable~ property:

IE:
#+begin_src elisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

IE:
#+begin_src elisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify
all the properties for ~:recipe~. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:

IE:
#+begin_src elisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a ~:branch~ to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't ~master~ (which
our package manager can't deal with; see raxod502/straight.el#279)

IE:
#+begin_src elisp :tangle no
(package! builtin-package :recipe (:branch "develop"))
#+end_src

Use ~:pin~ to specify a particular commit to install.
IE:
#+begin_src elisp :tangle no
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src

Doom's packages are pinned to a specific commit and updated from release to
release. The ~unpin!~ macro allows you to unpin single packages...

IE:
#+begin_src elisp :tangle no
(unpin! pinned-package)
; ...or multiple packages
(unpin! pinned-package another-pinned-package)
; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
(unpin! t)
#+end_src

*** Declarations

So, finally, let's declare the packages we will use:

#+begin_src elisp :tangle packages.el
(package! org-edna)
(package! mozc)
#+end_src

And disable ones we don't use.
#+begin_src elisp :tangle packages.el
(package! ddskk ;; MOZC is better, consider contributing it to the japanese module.
  :disable t)
#+end_src

** config.el

*** Lexical binding

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC


*** Personal information

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src elisp
(setq user-full-name "Daniel Levy Moreno"
      user-mail-address "daniellevymoreno@gmail.com")
#+end_src


*** Default font

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

IE:
#+begin_src elisp :tangle no
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

Let's choose our monospaced font, Roboto Mono goodness:
#+begin_src elisp
(setq doom-font (font-spec :family "monospace" :size 16 :name "Roboto Mono"))
#+end_src


*** Default theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-nord)
#+end_src

**** Nord powered aesthetics.

Let's add some small customizations, mostly make everything a bit brighter and bigger:

#+begin_src elisp
(use-package! doom-nord-theme
  :defer t
  :custom
  (doom-nord-brighter-modeline t)
  (doom-nord-padded-modeline t)
  (doom-nord-region-highlight 'frost))
#+end_src

*** Rainbow Delimeters

Matching pairs draw with the same face color, making them easily identifiable.

#+begin_src elisp
(add-hook! 'prog-mode-hook #'rainbow-delimiters-mode-enable)
#+end_src


*** Modeline

The default doom-modeline is great, the only thing is that I want it to show me
the evil state I am in with a letter instead of an icon:

#+begin_src elisp
(use-package! doom-modeline
  :defer t
  :custom
  (doom-modeline-modal-icon nil))
#+end_src

Also, the battery indicator is pretty neat:

#+begin_src elisp
(use-package! battery
  :hook
  (doom-modeline-mode . display-battery-mode))
#+end_src

*** TODO Perspective

*** Org

One of the killer features of emacs.

#+begin_src elisp
(use-package! org
    :defer t
#+end_src

If you use ~org~ and don't want your org files in the default location below,
change ~org-directory~. It must be set before org loads!

#+begin_src elisp
    :custom
    (org-directory "~/Cloud/org/")
#+end_src

Set ~org-attach-id-dir~ back to default value.

#+begin_src elisp
    (org-attach-id-dir  "data")
#+end_src

I only use one agenda file, that has all my rutine stuff in it.

#+begin_src elisp
    (org-agenda-files  `(,(expand-file-name "agenda.org" org-directory)))
#+end_src

Modules for keeping track of habits and completing checklists.

#+begin_src elisp
    (org-module  '(org-habit org-checklist))
#+end_src

Switch entry to 'DONE' when all subentries are done, to 'TODO' otherwise.

#+begin_src elisp
    :config
    (add-hook! 'org-after-todo-statistics-hook '(lambda (n-done n-not-done)
                          (let (org-log-done org-log-states)
                            (org-todo (if (= n-not-done 0) "DONE" "TODO")))))
#+end_src


Switch header 'TODO' state to 'DONE' when all checkboxes are ticked, to 'TODO'
otherwise

#+begin_src elisp
    (add-hook! 'org-checkbox-statistics-hook  '(lambda ()
                                             (let ((todo-state (org-get-todo-state)) beg end)
                                               (unless (not todo-state)
                                                 (save-excursion
                                                   (org-back-to-heading t)
                                                   (setq beg (point))
                                                   (end-of-line)
                                                   (setq end (point))
                                                   (goto-char beg)
                                                   (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                                                          end t)
                                                       (if (match-end 1)
                                                           (if (equal (match-string 1) "100%")
                                                               (unless (string-equal todo-state "DONE")
                                                                 (org-todo 'done))
                                                             (unless (string-equal todo-state "TODO")
                                                               (org-todo 'todo)))
                                                         (if (and (> (match-end 2) (match-beginning 2))
                                                                  (equal (match-string 2) (match-string 3)))
                                                             (unless (string-equal todo-state "DONE")
                                                               (org-todo 'done))
                                                           (unless (string-equal todo-state "TODO")
                                                             (org-todo 'todo)))))))))))
#+end_src

More control ove how and when tasks change state.

#+begin_src elisp
(use-package! org-edna
  :hook
  '(org-mode . org-edna-mode))
#+end_src


*** Pretending we are in vim? That's just plain EVIL!

Bad puns aside, vim keybindings are hard to let go once you are used to them.
Luckily, doom comes with much of the heavy lifting already done when it comes to
evil mode. We just gotta customize some minor details.

#+begin_src elisp
(use-package! evil
  :defer t
  :custom
#+end_src

Make horizontal motions move to other lines.

#+begin_src elisp
  (evil-cross-lines t)
#+end_src

Remove highlighted items after search is finished.

#+begin_src elisp
  (evil-ex-search-persistent-highlight t)
#+end_src

Universal argument mapped to M-u instead.

#+begin_src elisp
  :config
  (map! :g "M-u" #'universal-argument))
#+end_src


*** Line-numbers

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src


*** Helpful

Let's make an global keybinding to find something I don't understand about emacs
quickly!

#+begin_src elisp
(map! :g "C-c C-d" #'helpful-at-point)
#+end_src

*** Which Key

Doom emacs default config is too slow, lets speed it up.

#+begin_src elisp
(use-package! which-key
  :defer t
  :custom
  (which-key-idle-delay 0.1)
  (which-key-idle-secondary-delay 0.2))
#+end_src

*** Customize Group

An essential interface to know what to customize!

#+begin_src elisp
(use-package! cus-edit
  :defer t
#+end_src

I mostly use it to know the customizable options in a package, chaging the
values within this configuration. So, let's make it show the actual real values.

#+begin_src elisp
  :custom
  (custom-unlispify-menu-entries nil)
  (custom-unlispify-tag-names nil)
  (custom-unlispify-remove-prefixes nil))
#+end_src

*** RSS, or how to get news the old-way.

First, lets bring our feeds into the cloud.

#+begin_src elisp
(use-package! elfeed
  :defer t
  :custom
  (elfeed-db-directory "~/Cloud/elfeed/")
#+end_src

Special faces for special tags.

#+begin_src elisp
  (elfeed-search-face-alist '((unread elfeed-search-unread-title-face)
                              (★      elfeed-search-unread-count-face)))
#+end_src


Show me entries from within a month that I haven't read.

#+begin_src elisp
  :config
  (setq elfeed-search-filter "@4-week-ago +unread "))
#+end_src


Give it an easy keybinding to access it:

#+begin_src elisp
(map! :leader :desc "RSS feed" :m "o e" #'elfeed)
#+end_src


And point elfeed to the org configuration file.

#+begin_src elisp
(use-package! elfeed-org
  :defer t
  :custom
  (rmh-elfeed-org-files (list (concat org-directory "elfeed.org"))))
#+end_src

Keybinding to easily find the feeds file.

#+begin_src elisp
(map! :leader
      :desc "RSS feed config" :m "o E" (lambda ()
                                          (interactive)
                                          (find-file (car rmh-elfeed-org-files))))
#+end_src

**** TODO Create =x= keybinding for =starring= (★) a register, in search map and show map

*** Japanese input.

I am learning japanese as a hobby, and I do most of my note taking in emacs. To input japanese text we use google's MOZC.

First, let's define our toggle function. Activates mozc mode and changes the modeline to show it.

#+begin_src elisp
;;;###autoload
(defun dan/toggle-mozc-mode ()
  "Toggle activation/deactivation of `mozc-mode'."
  (interactive)
  (let* ((active (mozc-mode))
         (msg-modeline (if active
                           '("Activated" . "日本語")
                         '("Deactivated" . ""))))
         (progn
           (message "Mozc Mode %s" (car msg-modeline))
           (setq global-mode-string (cdr msg-modeline)))))
#+end_src

Let's lazy load mozc, so it loads only when our entry function is called.

#+begin_src elisp
(use-package! mozc
  :commands mozc-mode
#+end_src

The overlay style is sluggish, the echo-area style is still pretty and very functional, it even works in the minibuffer!

#+begin_src elisp
  :custom
  (mozc-candidate-style 'echo-area))
#+end_src

Finally, we create a keybinding activate mozc-mode.

#+begin_src elisp
(map! :g "C-x j" #'dan/toggle-mozc-mode)
#+end_src

**** TODO UGLY HACK, FIX THIS UNHOLY CREATION

This is an ugly as hell hack that removes the keybindings defined by doom so mozc can work with evil-org-mode.

I think that a better solution would be remove the bindings whe in mozc-mode and re-add them when getting out of mozc-mode

[[https://emacs.stackexchange.com/questions/47090/how-to-automatically-remove-a-hook-provided-by-a-minor-mode-after-disabling-that/47092#47092][Something like this might do.]]

#+begin_src elisp
  (after! evil-org ;; TODO Document! Ugly hack to make mozc work in evil-org-mode
    (map! :map evil-org-mode-map :i "<return>" nil
                                 :i "RET"      nil))
#+end_src

**** TODO Prerequesites

Requires emacs_mozc_helper, this is how you install it:

*** Rust

Seems like rls is more stable than rust-analyzer.

#+begin_src elisp
(use-package! rustic
  :defer t
  :custom
  (rustic-lsp-server 'rls)
#+end_src

When using the rustic popup, be in emacs state.

**** TODO See if we can use ~set-popup-rules!~ to do this for us.

#+begin_src elisp
  :config
  (when (featurep 'evil)
    (add-hook! 'rustic-popup-mode-hook #'evil-emacs-state)))
#+end_src
